openapi: 3.0.0
info:
    title: User API
    description: API for user management (CRUD operations, roles, password management)
    version: 1.0.0
    contact:
        name: NexSphereShop-API
        email: support@nexsphereshop.com

tags:
    - name: Users
      description: Endpoints related to user management

paths:
    /api/users/create:
        post:
            tags:
                - Users
            summary: Create a new user
            requestBody:
                description: User creation data
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                fullname:
                                    type: string
                                    example: John Doe
                                    description: Full name of the user
                                email:
                                    type: string
                                    example: john@example.com
                                    description: Email of the user
                                password:
                                    type: string
                                    format: password
                                    example: 'strongpassword'
                                    description: Password for the user account
                                passwordConfirm:
                                    type: string
                                    format: password
                                    example: 'strongpassword'
                                    description: Confirmation of the password
                                role:
                                    type: string
                                    enum: ['admin', 'user']
                                    example: user
                                    description: Role of the user
                            required:
                                - fullname
                                - email
                                - password
                                - passwordConfirm
            responses:
                201:
                    description: User successfully created
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: string
                                        example: success
                                    data:
                                        type: object
                                        properties:
                                            user:
                                                $ref: '#/components/schemas/UserResponse'
                400:
                    description: Bad Request - Invalid input
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: string
                                        example: error
                                    message:
                                        type: string
                                        example: Invalid email or password

    /api/users:
        get:
            tags:
                - Users
            summary: Get all users
            parameters:
                - in: query
                  name: role
                  schema:
                      type: string
                      enum: ['admin', 'user']
                  description: Filter users by role
                - in: query
                  name: email
                  schema:
                      type: string
                  description: Filter users by email
            responses:
                200:
                    description: List of users retrieved
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: string
                                        example: success
                                    data:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/UserResponse'

    /api/users/{userId}:
        get:
            tags:
                - Users
            summary: Get a user by ID
            parameters:
                - in: path
                  name: userId
                  required: true
                  schema:
                      type: string
                      example: 60f8f5e2c2e4de001fa6f123
                  description: ID of the user to retrieve
            responses:
                200:
                    description: User found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: string
                                        example: success
                                    data:
                                        $ref: '#/components/schemas/UserResponse'
                404:
                    description: User not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: string
                                        example: error
                                    message:
                                        type: string
                                        example: User not found

        patch:
            tags:
                - Users
            summary: Update a user's details
            requestBody:
                description: Data to update user details
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserUpdate'
            responses:
                200:
                    description: User successfully updated
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: string
                                        example: success
                                    data:
                                        $ref: '#/components/schemas/UserResponse'
                404:
                    description: User not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: string
                                        example: error
                                    message:
                                        type: string
                                        example: User not found

        delete:
            tags:
                - Users
            summary: Delete a user by ID
            parameters:
                - in: path
                  name: userId
                  required: true
                  schema:
                      type: string
                      example: 60f8f5e2c2e4de001fa6f123
                  description: ID of the user to delete
            responses:
                204:
                    description: User successfully deleted
                404:
                    description: User not found
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: string
                                        example: error
                                    message:
                                        type: string
                                        example: User not found

    /api/users/me:
        get:
            tags:
                - Users
            summary: Get current user details (me)
            security:
                - bearerAuth: []
            responses:
                200:
                    description: Current user details retrieved
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: string
                                        example: success
                                    data:
                                        $ref: '#/components/schemas/UserResponse'
                401:
                    description: Unauthorized - Invalid token
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: string
                                        example: error
                                    message:
                                        type: string
                                        example: Invalid token

        patch:
            tags:
                - Users
            summary: Update current user's details
            requestBody:
                description: Data to update current user details
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserUpdate'
            security:
                - bearerAuth: []
            responses:
                200:
                    description: Current user successfully updated
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: string
                                        example: success
                                    data:
                                        $ref: '#/components/schemas/UserResponse'

    /api/users/me/change-password:
        patch:
            tags:
                - Users
            summary: Change password of the current user
            requestBody:
                description: Old and new passwords
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                oldPassword:
                                    type: string
                                    format: password
                                    example: 'oldpassword'
                                newPassword:
                                    type: string
                                    format: password
                                    example: 'newstrongpassword'
                                passwordConfirm:
                                    type: string
                                    format: password
                                    example: 'newstrongpassword'
                            required:
                                - oldPassword
                                - newPassword
                                - passwordConfirm
            security:
                - bearerAuth: []
            responses:
                200:
                    description: Password successfully changed
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: string
                                        example: success
                                    message:
                                        type: string
                                        example: Password successfully changed
                400:
                    description: Bad Request - Password mismatch
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: string
                                        example: error
                                    message:
                                        type: string
                                        example: Passwords do not match

components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT

    schemas:
        UserResponse:
            type: object
            properties:
                id:
                    type: string
                    example: 60f8f5e2c2e4de001fa6f123
                fullname:
                    type: string
                    example: John Doe
                email:
                    type: string
                    example: john@example.com
                role:
                    type: string
                    enum: ['admin', 'user']
                    example: user
                hasShippingAddress:
                    type: boolean
                    example: false
                shippingAddress:
                    type: object
                    properties:
                        firstName:
                            type: string
                            example: John
                        lastName:
                            type: string
                            example: Doe
                        address:
                            type: string
                            example: '123 Street Name'
                        city:
                            type: string
                            example: 'City Name'
                        postalCode:
                            type: string
                            example: '12345'
                        province:
                            type: string
                            example: 'State Name'
                        country:
                            type: string
                            example: 'Country Name'
                        phone:
                            type: string
                            example: '123456789'

        UserUpdate:
            type: object
            properties:
                fullname:
                    type: string
                    example: John Doe
                email:
                    type: string
                    example: john@example.com
                shippingAddress:
                    $ref: '#/components/schemas/UserResponse/properties/shippingAddress'
